package com.example.awesome;

//import android.app.ActionBar.Tab;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;

import android.app.ActionBar;
import android.app.Activity;
import android.app.Fragment;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
//import android.widget.EditText;
//import android.widget.ImageView;
import android.widget.ListView;
//import android.os.Build;
import android.widget.SearchView;

import android.support.v4.app.DialogFragment;
import android.support.v4.widget.DrawerLayout;


public class MainActivity extends Activity {
	
    
    // For Media Capture
	private static final int CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE = 100;
	private static final int CAPTURE_VIDEO_ACTIVITY_REQUEST_CODE = 200;

	private Uri fileUri;
	public static final int MEDIA_TYPE_IMAGE = 1;
	public static final int MEDIA_TYPE_VIDEO = 2;
    
	// List Handling
    private String[] listOptions = {"My Gallery", "My Canvas", "My Messages"};
	private DrawerLayout myDrawerLayout;
    private ListView myDrawerList;


    @Override
    protected void onCreate(Bundle savedInstanceState) 
    {
       
    	// Init stuff
    	super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        // Set up XML stuff
        myDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
        myDrawerList = (ListView) findViewById(R.id.drawer_left);
        
        // Populate Drawer List
        myDrawerList.setAdapter(new ArrayAdapter<String>(this,
        		R.layout.drawer_list_item, listOptions));
        
        // Create an event listener
        myDrawerList.setOnItemClickListener(new DrawerItemClickListener());
        
        
        
        /*if (savedInstanceState == null) {
            getFragmentManager().beginTransaction()
                    .add(R.id.container, new PlaceholderFragment())
                    .commit();
        }*/
        
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) 
    {
        
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        
        // Search stuff
        MenuItem searchItem = menu.findItem(R.id.action_search);
        SearchView searchView = (SearchView) menu.findItem(R.id.action_search).getActionView();
        searchView.setQueryHint("Search Gallery");
        
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) 
    {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
    	// Handle press
    	switch(item.getItemId())
    	{
    		case R.id.action_camera:
    			openCamera();
    			return true;
    		default:
    			return super.onOptionsItemSelected(item);
    	}
    }

    /**
     * A placeholder fragment containing a simple view.
     */
    public static class PlaceholderFragment extends Fragment 
    {

        public PlaceholderFragment() 
        {
        	
        }

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                Bundle savedInstanceState) 
        {
            View rootView = inflater.inflate(R.layout.fragment_main, container, false);
            return rootView;
        }
    }
    
    
    //
    //	Navigation Drawer Components
    //
    
    /* The INNER CLASS click listener for ListView in the navigation drawer */
    private class DrawerItemClickListener implements ListView.OnItemClickListener 
    {
        @Override
        public void onItemClick(AdapterView<?> parent, View view, int position, long id) 
        {
            selectItem(position);
        }
    }
    
    private void selectItem(int position)
    {
    	// Finalize Selection
        myDrawerList.setItemChecked(position, true);
    	setTitle(listOptions[position]);
    	myDrawerLayout.closeDrawer(myDrawerList);
    }
    
    @Override
    public void setTitle(CharSequence title) 
    {
        //mTitle = title;
        getActionBar().setTitle(title);
    }
    
    //
    // Inner Class Fragments
    //
    
    public static class GalleryFragment extends Fragment
    {
    	// Empty Constructor Required
    	public GalleryFragment()
    	{
    		
    	}
    	
        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                Bundle savedInstanceState) 
        {
            View rootView = inflater.inflate(R.layout.fragment_gallery, container, false);

            return rootView;
        }
    }
    
    
    
    //
    //	Camera Handling
    //
    
    /** Launches the Camera from Action Bar1 */
    public void openCamera()
    {
    	// Create new intent for to take picture and then return control
    	Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
    	
    	// Create and name output file
    	try
    	{
    		fileUri = getOutputMediaFileUri(MEDIA_TYPE_IMAGE);
    		intent.putExtra(MediaStore.EXTRA_OUTPUT, fileUri);
    	}
    	
    	catch(Exception e)
    	{	
    		// Log exception
    		Log.d("Awesome", "failed to create output file");
    		
    		// Notify User
    		ErrorDialog newFragment = new ErrorDialog();
    		newFragment.show(getFragmentManager(), "Error");
    		
    		return;
    	}
    	
    	// Start image capture intent
    	startActivityForResult(intent, CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE);
    	
    }
    
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE) {
            if (resultCode == RESULT_OK) {
                // Image captured and saved to fileUri specified in the Intent
                Toast.makeText(this, "Image saved to:\n" +
                         data.getData(), Toast.LENGTH_LONG).show();
            } else if (resultCode == RESULT_CANCELED) {
                // User cancelled the image capture
            } else {
                // Image capture failed, advise user
            }
        }

        if (requestCode == CAPTURE_VIDEO_ACTIVITY_REQUEST_CODE) {
            if (resultCode == RESULT_OK) {
                // Video captured and saved to fileUri specified in the Intent
                Toast.makeText(this, "Video saved to:\n" +
                         data.getData(), Toast.LENGTH_LONG).show();
            } else if (resultCode == RESULT_CANCELED) {
                // User cancelled the video capture
            } else {
                // Video capture failed, advise user
            }
        }
    }
    
    /** Create a file Uri for saving an image or video */
    private static Uri getOutputMediaFileUri(int type)
    {
          return Uri.fromFile(getOutputMediaFile(type));
    }

    /** Create a File for saving an image or video */
    private static File getOutputMediaFile(int type)
    {
        // To be safe, you should check that the SDCard is mounted
        // using Environment.getExternalStorageState() before doing this.
    	
    	//Log.d("Awesome", Environment.getExternalStorageState());

        File mediaStorageDir = new File(Environment.getExternalStoragePublicDirectory(
                  Environment.DIRECTORY_PICTURES), "Awesome");
        

        // Create the storage directory if it does not exist
        if (! mediaStorageDir.exists())
        {
            if (! mediaStorageDir.mkdirs())
            {
                Log.d("Awesome", "failed to create directory");
                return null;
            }
        }

        // Create a media file name
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
        File mediaFile;
        if (type == MEDIA_TYPE_IMAGE)
        {
            mediaFile = new File(mediaStorageDir.getPath() + File.separator +
            "IMG_"+ timeStamp + ".jpg");
        } 
        else if(type == MEDIA_TYPE_VIDEO) 
        {
            mediaFile = new File(mediaStorageDir.getPath() + File.separator +
            "VID_"+ timeStamp + ".mp4");
        } 
        else 
        {
            return null;
        }

        return mediaFile;
    }
   


}
